ct <- train(
factor(Attrition) ~., data = train.data,
method = "rpart",
trControl = trainControl("cv", number = 10),
tuneGrid = expand.grid(cp = seq(0, 0.1, by = 0.01)), # Let's use tuneGrid to provide exact values that we want to try (the hyper-parameter is now called `cp`)
control = rpart.control(minsplit = 1) #Check out the options in ?rpart.control (part of the rpart package)
)
plot(ct)
######################################################################
### Title: "Homework 6"
### Course: STA 235H
### Semester: Fall 2021
### Students: Name 1, Name 2, Name 3, and Name 4
#######################################################################
# Clears memory
rm(list = ls())
# Clears console
cat("\014")
# scipen=999 removes scientific notation; scipen=0 turns it on.
options(scipen = 999)
### Load libraries
# If you don't have one of these packages installed already, you will need to run install.packages() line
library(tidyverse)
library(caret)
library(ggplot2)
library(estimatr)
library(modelr)
library(modelsummary)
library(rsample)
library(caret)
library(rpart) #We'll need to load it to run a few things
library(rattle) # This is to make pretty tree plots with the caret package.
library(modelr)
################################################################################
### Task 1: IBM knows you are leaving
################################################################################
employees <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Homework/data/hw6/employee_attrition.csv") %>%
select(-c(EmployeeCount, Over18, StandardHours))
## Question 1.1
employees$EducationLevel_BelowCollege <- ifelse(employees$Education == "1", 1, 0)
employees$EducationLevel_College <- ifelse(employees$Education == "2", 1, 0)
employees$EducationLevel_Bachelor <- ifelse(employees$Education == "3", 1, 0)
employees$EducationLevel_Master <- ifelse(employees$Education == "4", 1, 0)
employees$EducationLevel_Doctor <- ifelse(employees$Education == "5", 1, 0)
employees$EnvironmentSatisfaction_Low <- ifelse(employees$EnvironmentSatisfaction == "1", 1, 0)
employees$EnvironmentSatisfaction_Medium <- ifelse(employees$EnvironmentSatisfaction == "2", 1, 0)
employees$EnvironmentSatisfaction_High <- ifelse(employees$EnvironmentSatisfaction == "3", 1, 0)
employees$EducationLevel_VeryHigh <- ifelse(employees$EnvironmentSatisfaction == "4", 1, 0)
employees$JobInvolvement_Low <- ifelse(employees$JobInvolvement == "1", 1, 0)
employees$JobInvolvement_Medium <- ifelse(employees$JobInvolvement == "2", 1, 0)
employees$JobInvolvement_High <- ifelse(employees$JobInvolvement == "3", 1, 0)
employees$JobInvolvement_VeryHigh <- ifelse(employees$JobInvolvement == "4", 1, 0)
employees$JobSatisfaction_Low <- ifelse(employees$JobSatisfaction == "1", 1, 0)
employees$JobSatisfaction_Medium <- ifelse(employees$JobSatisfaction == "2", 1, 0)
employees$JobSatisfaction_High <- ifelse(employees$JobSatisfaction == "3", 1, 0)
employees$JobSatisfaction_VeryHigh <- ifelse(employees$JobSatisfaction == "4", 1, 0)
employees$PerformanceRating_Low <- ifelse(employees$PerformanceRating == "1", 1, 0)
employees$PerformanceRating_Good <- ifelse(employees$PerformanceRating == "2", 1, 0)
employees$PerformanceRating_Excellent <- ifelse(employees$PerformanceRating == "3", 1, 0)
employees$PerformanceRating_Outstanding <- ifelse(employees$PerformanceRating == "4", 1, 0)
employees$RelationshipSatisfaction_Low <- ifelse(employees$RelationshipSatisfaction == "1", 1, 0)
employees$RelationshipSatisfaction_Medium <- ifelse(employees$RelationshipSatisfaction == "2", 1, 0)
employees$RelationshipSatisfaction_High <- ifelse(employees$RelationshipSatisfaction == "3", 1, 0)
employees$RelationshipSatisfaction_VeryHigh <- ifelse(employees$RelationshipSatisfaction == "4", 1, 0)
employees$WorkLifeBalance_Bad <- ifelse(employees$WorkLifeBalance == "1", 1, 0)
employees$WorkLifeBalance_Good <- ifelse(employees$WorkLifeBalance == "2", 1, 0)
employees$WorkLifeBalance_Better <- ifelse(employees$WorkLifeBalance == "3", 1, 0)
employees$WorkLifeBalance_Best <- ifelse(employees$WorkLifeBalance == "4", 1, 0)
set.seed(100)
n <- nrow(employees)
train <- sample(1:n, n*0.7)
train.data <- employees %>% slice(train)
test.data <- employees %>% slice(-train)
## Question 1.2
employees$JobSatisfaction_HighOrVeryHigh <- ifelse(employees$JobSatisfaction >= "3", 1, 0)
employees$Male_Bool <- ifelse(employees$Gender >= "Male", 1, 0)
employees$Single_Bool <- ifelse(employees$MaritalStatus == "Single", 1, 0)
employees$Married_Bool <- ifelse(employees$MaritalStatus == "Married", 1, 0)
employees$Divorced_Bool <- ifelse(employees$MaritalStatus == "Divorced", 1, 0)
employees_bal <- employees %>% select(Attrition, JobSatisfaction_HighOrVeryHigh, age, Male_Bool, Single_Bool, Married_Bool, Divorced_Bool, MonthlyIncome)
datasummary_balance(~ Attrition, data = employees_bal, title = "Balance table", fmt=2, dinm_statistic = "p.value")
## Question 1.3
ct <- train(
factor(Attrition) ~., data = train.data,
method = "rpart",
trControl = trainControl("cv", number = 10),
tuneGrid = expand.grid(cp = seq(0, 0.1, by = 0.01)), # Let's use tuneGrid to provide exact values that we want to try (the hyper-parameter is now called `cp`)
control = rpart.control(minsplit = 1) #Check out the options in ?rpart.control (part of the rpart package)
)
plot(ct)
ct$results$cp
fancyRpartPlot(ct$finalModel, caption = "Attrition - Simple classification tree")
ct$finalModel
## Question 1.5
set.seed(100)
m <- test.data %>% select(Attrition) %>% summarise_all(., mean) %>% pull()
random.quit <- sample(c(0,1), size = nrow(test.data), replace = TRUE, prob = c(1-m, m))
pred.class <- ct %>% predict(test.data)
test.data <- test.data %>% mutate(prediction = pred.class)
mean(factor(test.data$Attrition) == test.data$prediction)
set.seed(100)
m <- test.data %>% select(Attrition) %>% summarise_all(., mean) %>% pull()
random.quit <- sample(c(0,1), size = nrow(test.data), replace = TRUE, prob = c(1-m, m))
pred.class <- ct %>% predict(test.data)
test.data <- test.data %>% mutate(prediction = pred.class)
mean(factor(random.quit$Attrition) == test.data$prediction)
set.seed(100)
m <- test.data %>% select(Attrition) %>% summarise_all(., mean) %>% pull()
random.quit <- sample(c(0,1), size = nrow(test.data), replace = TRUE, prob = c(1-m, m))
pred.class <- ct %>% predict(test.data)
test.data <- test.data %>% mutate(prediction = pred.class)
mean(factor(random.quit) == test.data$prediction)
set.seed(100)
m <- test.data %>% select(Attrition) %>% summarise_all(., mean) %>% pull()
random.quit <- sample(c(0,1), size = nrow(test.data), replace = TRUE, prob = c(1-m, m))
pred.class <- ct %>% predict(test.data)
test.data <- test.data %>% mutate(prediction = pred.class)
mean(random.quit == test.data$prediction)
set.seed(100)
m <- test.data %>% select(Attrition) %>% summarise_all(., mean) %>% pull()
random.quit <- sample(c(0,1), size = nrow(test.data), replace = TRUE, prob = c(1-m, m))
pred.class <- ct %>% predict(test.data)
test.data <- test.data %>% mutate(prediction = pred.class)
mean(factor(test.data$Attrition) == test.data$prediction)
mean(factor(random.quit) == test.data$prediction)
set.seed(100)
m <- test.data %>% select(Attrition) %>% summarise_all(., mean) %>% pull()
random.quit <- sample(c(0,1), size = nrow(test.data), replace = TRUE, prob = c(1-m, m))
pred.class <- ct %>% predict(test.data)
test.data <- test.data %>% mutate(prediction = pred.class)
mean(factor(test.data$Attrition) == test.data$prediction)
mean(factor(test.data$Attrition) == random.quit)
ct <- train(
factor(Attrition) ~., data = train.data,
method = "rpart",
trControl = trainControl("cv", number = 10),
tuneGrid = expand.grid(cp = seq(0, 0.1, by = 0.01)), # Let's use tuneGrid to provide exact values that we want to try (the hyper-parameter is now called `cp`)
control = rpart.control(minsplit = 1) #Check out the options in ?rpart.control (part of the rpart package)
)
plot(ct)
ct$results$cp
fancyRpartPlot(ct$finalModel, caption = "Attrition - Simple classification tree")
ct$finalModel
plot(ct)
employees$JobSatisfaction_HighOrVeryHigh <- ifelse(employees$JobSatisfaction >= "3", 1, 0)
employees$Male_Bool <- ifelse(employees$Gender >= "Male", 1, 0)
employees$Single_Bool <- ifelse(employees$MaritalStatus == "Single", 1, 0)
employees$Married_Bool <- ifelse(employees$MaritalStatus == "Married", 1, 0)
employees$Divorced_Bool <- ifelse(employees$MaritalStatus == "Divorced", 1, 0)
employees_bal <- employees %>% select(Attrition, JobSatisfaction_HighOrVeryHigh, age, Male_Bool, Single_Bool, Married_Bool, Divorced_Bool, MonthlyIncome)
datasummary_balance(~ Attrition, data = employees_bal, title = "Balance table", fmt=2, dinm_statistic = "p.value")
employees$JobSatisfaction_HighOrVeryHigh <- ifelse(employees$JobSatisfaction >= "3", 1, 0)
employees$Male_Bool <- ifelse(employees$Gender >= "Male", 1, 0)
employees$Single_Bool <- ifelse(employees$MaritalStatus == "Single", 1, 0)
employees$Married_Bool <- ifelse(employees$MaritalStatus == "Married", 1, 0)
employees$Divorced_Bool <- ifelse(employees$MaritalStatus == "Divorced", 1, 0)
employees_bal <- employees %>% select(Attrition, JobSatisfaction_HighOrVeryHigh, age, Male_Bool, Single_Bool, Married_Bool, Divorced_Bool, MonthlyIncome)
datasummary_balance(~ Attrition, data = employees_bal, title = "Employees Balance table", fmt=2, dinm_statistic = "p.value")
ct <- train(
factor(Attrition) ~., data = train.data,
method = "rpart",
trControl = trainControl("cv", number = 10),
tuneGrid = expand.grid(cp = seq(0, 0.1, by = 0.01)),
control = rpart.control(minsplit = 1)
)
plot(ct)
ct$results$cp
fancyRpartPlot(ct$finalModel, caption = "Attrition - Simple classification tree")
ct$finalModel
set.seed(100)
m <- test.data %>% select(Attrition) %>% summarise_all(., mean) %>% pull()
random.quit <- sample(c(0,1), size = nrow(test.data), replace = TRUE, prob = c(1-m, m))
pred.class <- ct %>% predict(test.data)
test.data <- test.data %>% mutate(prediction = pred.class)
mean(factor(test.data$Attrition) == test.data$prediction)
mean(factor(test.data$Attrition) == random.quit)
news <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Homework/data/hw6/news.csv")
news_filted <- news %>% select(-c(url))
## Question 2.1
set.seed(100)
n <- nrow(news_filted)
train <- sample(1:n, n*0.7)
train.data <- news_filted %>% slice(train)
test.data <- news_filted %>% slice(-train)
rt <- train(
shares ~., data = train.data, # We give it our model and data (look that I use -unsubscribe so I don't use it as a predictor!)
method = "rpart", #Method is rpart (any decision tree will use rpart)
trControl = trainControl("cv", number = 10), # We want cross-validation with 10 fold
tuneLength = 50 #That basically gives the number of values that will search for cp
)
plot(rt)
rt$finalModel
rmse(rt, test.data)
## Question 2.2
library(tidyverse)
library(caret)
library(ggplot2)
library(estimatr)
library(modelr)
library(modelsummary)
library(rsample)
library(caret)
library(rpart) #We'll need to load it to run a few things
library(rattle) # This is to make pretty tree plots with the caret package.
library(modelr)
set.seed(100)
n <- nrow(news_filted)
train <- sample(1:n, n*0.7)
train.data <- news_filted %>% slice(train)
test.data <- news_filted %>% slice(-train)
rt <- train(
shares ~., data = train.data, # We give it our model and data (look that I use -unsubscribe so I don't use it as a predictor!)
method = "rpart", #Method is rpart (any decision tree will use rpart)
trControl = trainControl("cv", number = 10), # We want cross-validation with 10 fold
tuneLength = 50 #That basically gives the number of values that will search for cp
)
plot(rt)
rt$finalModel
rmse(rt, test.data)
news <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Homework/data/hw6/news.csv")
news_filted <- news %>% select(-c(url))
## Question 2.1
set.seed(100)
n <- nrow(news_filted)
train <- sample(1:n, n*0.7)
train.data <- news_filted %>% slice(train)
test.data <- news_filted %>% slice(-train)
rt <- train(
shares ~., data = train.data, # We give it our model and data (look that I use -unsubscribe so I don't use it as a predictor!)
method = "rpart", #Method is rpart (any decision tree will use rpart)
trControl = trainControl("cv", number = 10), # We want cross-validation with 10 fold
tuneLength = 50 #That basically gives the number of values that will search for cp
)
plot(rt)
rt$finalModel
rmse(rt, test.data)
################################################################################
### Title: "Prediction Project"
### Course: STA 235H
### Semester: Fall 2021
### Names: Prayaag Gupta, Benjamin Mathew, Shaan Parekh, Benjamin Wang
################################################################################
# Clears memory
rm(list = ls())
# Clears console
cat("\014")
library(tidyverse)
# Before doing anything, load your data and select the sample we will use
setwd("/Users/benmathew/Desktop/Personal/UT_CSB/S3/STA235H")
d_total <- read.csv("TravisCountyData.csv") #Load your HMDA 2020 Travis county data here (downloaded)
# These are the row numbers you will need (everyone will use the same observations)
rows <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Project/data/row_sample.csv") %>%
pull() # Load it as a vector and not a dataframe.
d <- d_total %>% slice(rows)
# Now clean your data and conduct your analysis with the d dataset.
################################################################################
### Title: "Prediction Project"
### Course: STA 235H
### Semester: Fall 2021
### Names: Prayaag Gupta, Benjamin Mathew, Shaan Parekh, Benjamin Wang
################################################################################
# Clears memory
rm(list = ls())
# Clears console
cat("\014")
library(tidyverse)
# Before doing anything, load your data and select the sample we will use
setwd("/Users/benmathew/Desktop/Personal/UT_CSB/S3/STA235H")
d_total <- read.csv("TravisCountyData.csv") #Load your HMDA 2020 Travis county data here (downloaded)
# These are the row numbers you will need (everyone will use the same observations)
rows <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Project/data/row_sample.csv") %>%
pull() # Load it as a vector and not a dataframe.
d <- d_total %>% slice(rows)
# Now clean your data and conduct your analysis with the d dataset.
################################################################################
### Title: "Prediction Project"
### Course: STA 235H
### Semester: Fall 2021
### Names: Prayaag Gupta, Benjamin Mathew, Shaan Parekh, Benjamin Wang
################################################################################
# Clears memory
rm(list = ls())
# Clears console
cat("\014")
library(tidyverse)
# Before doing anything, load your data and select the sample we will use
setwd("/Users/benmathew/Desktop/Personal/UT_CSB/S3/STA235H/STA235FinalProject")
d_total <- read.csv("TravisCountyData.csv") #Load your HMDA 2020 Travis county data here (downloaded)
# These are the row numbers you will need (everyone will use the same observations)
rows <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Project/data/row_sample.csv") %>%
pull() # Load it as a vector and not a dataframe.
d <- d_total %>% slice(rows)
# Now clean your data and conduct your analysis with the d dataset.
View(d_total)
View(d_total)
for(i in 1:ncol(d_total)){
d_total[is.na(d_total[,i]), i] <- mean(d_total[,i], na.rm = TRUE)
}
warnings()
rm(list = ls())
# Clears console
cat("\014")
library(tidyverse)
# Before doing anything, load your data and select the sample we will use
setwd("/Users/benmathew/Desktop/Personal/UT_CSB/S3/STA235H/STA235FinalProject")
d_total <- read.csv("TravisCountyData.csv")  %>%
select(-c(activity_year, lei, derived_msa-md, state_code, county_code,
census_tract, prepayment_penalty_term, intro_rate_period))
# These are the row numbers you will need (everyone will use the same observations)
rows <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Project/data/row_sample.csv") %>%
pull() # Load it as a vector and not a dataframe.
d <- d_total %>% slice(rows)
################################################################################
### Title: "Prediction Project"
### Course: STA 235H
### Semester: Fall 2021
### Names: Prayaag Gupta, Benjamin Mathew, Shaan Parekh, Benjamin Wang
################################################################################
# Clears memory
rm(list = ls())
# Clears console
cat("\014")
library(tidyverse)
# Before doing anything, load your data and select the sample we will use
setwd("/Users/benmathew/Desktop/Personal/UT_CSB/S3/STA235H/STA235FinalProject")
d_total <- read.csv("TravisCountyData.csv")  %>%
select(-c(activity_year, lei, derived_msa_md, state_code, county_code,
census_tract, prepayment_penalty_term, intro_rate_period))
# These are the row numbers you will need (everyone will use the same observations)
rows <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Project/data/row_sample.csv") %>%
pull() # Load it as a vector and not a dataframe.
d <- d_total %>% slice(rows)
################################################################################
### Title: "Prediction Project"
### Course: STA 235H
### Semester: Fall 2021
### Names: Prayaag Gupta, Benjamin Mathew, Shaan Parekh, Benjamin Wang
################################################################################
# Clears memory
rm(list = ls())
# Clears console
cat("\014")
library(tidyverse)
# Before doing anything, load your data and select the sample we will use
setwd("/Users/benmathew/Desktop/Personal/UT_CSB/S3/STA235H/STA235FinalProject")
d_total <- read.csv("TravisCountyData.csv")  %>%
select(-c(activity_year, lei, derived_msa.md, state_code, county_code,
census_tract, prepayment_penalty_term, intro_rate_period))
# These are the row numbers you will need (everyone will use the same observations)
rows <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Project/data/row_sample.csv") %>%
pull() # Load it as a vector and not a dataframe.
d <- d_total %>% slice(rows)
################################################################################
### Title: "Prediction Project"
### Course: STA 235H
### Semester: Fall 2021
### Names: Prayaag Gupta, Benjamin Mathew, Shaan Parekh, Benjamin Wang
################################################################################
# Clears memory
rm(list = ls())
# Clears console
cat("\014")
library(tidyverse)
# Before doing anything, load your data and select the sample we will use
setwd("/Users/benmathew/Desktop/Personal/UT_CSB/S3/STA235H/STA235FinalProject")
d_total <- read.csv("TravisCountyData.csv")  %>%
select(-c(activity_year, lei, derived_msa.md, state_code, county_code,
census_tract, prepayment_penalty_term, intro_rate_period,
total_points_and_fees))
# These are the row numbers you will need (everyone will use the same observations)
rows <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Project/data/row_sample.csv") %>%
pull() # Load it as a vector and not a dataframe.
d <- d_total %>% slice(rows)
################################################################################
### Title: "Prediction Project"
### Course: STA 235H
### Semester: Fall 2021
### Names: Prayaag Gupta, Benjamin Mathew, Shaan Parekh, Benjamin Wang
################################################################################
# Clears memory
rm(list = ls())
# Clears console
cat("\014")
library(tidyverse)
# Before doing anything, load your data and select the sample we will use
setwd("/Users/benmathew/Desktop/Personal/UT_CSB/S3/STA235H/STA235FinalProject")
d_total <- read.csv("TravisCountyData.csv")  %>%
select(-c(activity_year, lei, derived_msa.md, state_code, county_code,
census_tract, prepayment_penalty_term, intro_rate_period,
total_points_and_fees, multifamily_affordable_units))
# These are the row numbers you will need (everyone will use the same observations)
rows <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Project/data/row_sample.csv") %>%
pull() # Load it as a vector and not a dataframe.
d <- d_total %>% slice(rows)
################################################################################
### Title: "Prediction Project"
### Course: STA 235H
### Semester: Fall 2021
### Names: Prayaag Gupta, Benjamin Mathew, Shaan Parekh, Benjamin Wang
################################################################################
# Clears memory
rm(list = ls())
# Clears console
cat("\014")
library(tidyverse)
# Before doing anything, load your data and select the sample we will use
setwd("/Users/benmathew/Desktop/Personal/UT_CSB/S3/STA235H/STA235FinalProject")
d_total <- read.csv("TravisCountyData.csv")  %>%
select(-c(activity_year, lei, derived_msa.md, state_code, county_code,
census_tract, prepayment_penalty_term, intro_rate_period,
total_points_and_fees, multifamily_affordable_units,
applicant_ethnicity.2, applicant_ethnicity.3,
applicant_ethnicity.4, applicant_ethnicity.5,
co-applicant_ethnicity.2, co-applicant_ethnicity.3,
co-applicant_ethnicity.4, co-applicant_ethnicity.5))
# These are the row numbers you will need (everyone will use the same observations)
rows <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Project/data/row_sample.csv") %>%
pull() # Load it as a vector and not a dataframe.
d <- d_total %>% slice(rows)
################################################################################
### Title: "Prediction Project"
### Course: STA 235H
### Semester: Fall 2021
### Names: Prayaag Gupta, Benjamin Mathew, Shaan Parekh, Benjamin Wang
################################################################################
# Clears memory
rm(list = ls())
# Clears console
cat("\014")
library(tidyverse)
# Before doing anything, load your data and select the sample we will use
setwd("/Users/benmathew/Desktop/Personal/UT_CSB/S3/STA235H/STA235FinalProject")
d_total <- read.csv("TravisCountyData.csv")  %>%
select(-c(activity_year, lei, derived_msa.md, state_code, county_code,
census_tract, prepayment_penalty_term, intro_rate_period,
total_points_and_fees, multifamily_affordable_units,
applicant_ethnicity.2, applicant_ethnicity.3,
applicant_ethnicity.4, applicant_ethnicity.5,
co.applicant_ethnicity.2, co.applicant_ethnicity.3,
co.applicant_ethnicity.4, co.applicant_ethnicity.5))
# These are the row numbers you will need (everyone will use the same observations)
rows <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Project/data/row_sample.csv") %>%
pull() # Load it as a vector and not a dataframe.
d <- d_total %>% slice(rows)
################################################################################
### Title: "Prediction Project"
### Course: STA 235H
### Semester: Fall 2021
### Names: Prayaag Gupta, Benjamin Mathew, Shaan Parekh, Benjamin Wang
################################################################################
# Clears memory
rm(list = ls())
# Clears console
cat("\014")
library(tidyverse)
# Before doing anything, load your data and select the sample we will use
setwd("/Users/benmathew/Desktop/Personal/UT_CSB/S3/STA235H/STA235FinalProject")
d_total <- read.csv("TravisCountyData.csv")  %>%
select(-c(activity_year, lei, derived_msa.md, state_code, county_code,
census_tract, prepayment_penalty_term, intro_rate_period,
total_points_and_fees, multifamily_affordable_units,
applicant_ethnicity.2, applicant_ethnicity.3,
applicant_ethnicity.4, applicant_ethnicity.5,
co.applicant_ethnicity.2, co.applicant_ethnicity.3,
co.applicant_ethnicity.4, co.applicant_ethnicity.5,
applicant_race.2, applicant_race.3, applicant_race.4,
applicant_race.5))
# These are the row numbers you will need (everyone will use the same observations)
rows <- read.csv("https://raw.githubusercontent.com/maibennett/sta235/main/exampleSite/content/Assignments/Project/data/row_sample.csv") %>%
pull() # Load it as a vector and not a dataframe.
d <- d_total %>% slice(rows)
install.packages("naniar")
library(naniar)
d_total <- replace_with_na(replace = list(loan_to_value_ratio = "Exempt"))
d_total %>% replace_with_na(replace = list(d_total$loan_to_value_ratio = "Exempt"))
d_total %>% replace_with_na(replace = list(d_total$loan_to_value_ratio == "Exempt"))
d_total <- read.csv("TravisCountyData.csv")  %>%
select(-c(activity_year, lei, derived_msa.md, state_code, county_code,
census_tract, prepayment_penalty_term, intro_rate_period,
total_points_and_fees, multifamily_affordable_units,
applicant_ethnicity.2, applicant_ethnicity.3,
applicant_ethnicity.4, applicant_ethnicity.5,
co.applicant_ethnicity.2, co.applicant_ethnicity.3,
co.applicant_ethnicity.4, co.applicant_ethnicity.5,
applicant_race.2, applicant_race.3, applicant_race.4,
applicant_race.5))
d_total <- read.csv("TravisCountyData.csv")  %>%
select(-c(activity_year, lei, derived_msa.md, state_code, county_code,
census_tract, prepayment_penalty_term, intro_rate_period,
total_points_and_fees, multifamily_affordable_units,
applicant_ethnicity.2, applicant_ethnicity.3,
applicant_ethnicity.4, applicant_ethnicity.5,
co.applicant_ethnicity.2, co.applicant_ethnicity.3,
co.applicant_ethnicity.4, co.applicant_ethnicity.5,
applicant_race.2, applicant_race.3, applicant_race.4,
applicant_race.5))
d_total <- read.csv("TravisCountyData.csv")  %>%
select(-c(activity_year, lei, derived_msa.md, state_code, county_code,
census_tract, prepayment_penalty_term, intro_rate_period,
total_points_and_fees, multifamily_affordable_units,
applicant_ethnicity.2, applicant_ethnicity.3,
applicant_ethnicity.4, applicant_ethnicity.5,
co.applicant_ethnicity.2, co.applicant_ethnicity.3,
co.applicant_ethnicity.4, co.applicant_ethnicity.5,
applicant_race.2, applicant_race.3, applicant_race.4,
applicant_race.5, co.applicant_race.2, co.applicant_race.3,
co.applicant_race.4, co.applicant_race.5))
d_total %>% replace_with_na(replace = list(d_total$loan_to_value_ratio == "Exempt"))
d_total <- d_total %>% replace_with_na(replace = list(d_total$loan_to_value_ratio == "Exempt"))
d_total <- d_total %>% replace_with_na_all(condition = ~.d_total$loan_to_value_ratio == "Exempt")
d_total <- d_total %>% replace_with_na_all(condition = ~.loan_to_value_ratio == "Exempt")
d_total <- d_total %>% replace_with_na_all(condition = ~.x == "Exempt")
